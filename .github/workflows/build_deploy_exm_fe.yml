name: Build and Deploy EXM FE

on:
  push:
    branches:
      - main
    paths:
      - 'expenses-manager-frontend/**'
      - '.github/workflows/build_deploy_exm_fe.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'expenses-manager-frontend/**'
      - '.github/workflows/build_deploy_exm_fe.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    environment: deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download and install Maven
      run: sudo apt-get update && sudo apt-get install -y maven

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    - name: Replace BE_BASE_URL in environment.prod.ts
      run: sed -i 's#%{BE_BASE_URL}#https://${{ vars.DEPLOY_DOMAIN }}:8080#g' expenses-manager-frontend/src/main/frontend/src/environments/environment.prod.ts
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    - name: Build Angular application using Maven
      run: mvn clean install
      working-directory: expenses-manager-frontend

    - name: Upload build artifacts
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: expenses-manager-frontend/target/frontend

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: build
    environment: deploy
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build 
        path: ./frontend-build

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        
    - name: Get VM Public IP
      id: get-vm-ip
      run: |
        echo "vm_ip=$(az vm list-ip-addresses --name ${{ secrets.EXM_VM_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --query "[0].virtualMachine.network.publicIpAddresses[0].ipAddress" -o tsv)" >> $GITHUB_OUTPUT

    - name: Create SSH private key file
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
        chmod 600 ssh_key

    - name: Replace needed values into nginx.conf
      env:
        GITHUB_FE_SITE_DOMAIN: ${{ vars.DEPLOY_DOMAIN }}
        GITHUB_ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }} 
      run: |
        sed -i "s/REPLACE_DOMAIN/$GITHUB_FE_SITE_DOMAIN/g" ${{ github.workspace }}/.github/workflows/configs/nginx.conf
        sed -i "s/REPLACE_USER/$GITHUB_ADMIN_USERNAME/g" ${{ github.workspace }}/.github/workflows/configs/nginx.conf

    - name: Copy build files and nginx config to VM
      run: |
        scp -i ssh_key -o StrictHostKeyChecking=no -r frontend-build/* ${{ secrets.ADMIN_USERNAME }}@${{ steps.get-vm-ip.outputs.vm_ip }}:/tmp/frontend/
        scp -i ssh_key -o StrictHostKeyChecking=no -r .github/workflows/configs/nginx.conf ${{ secrets.ADMIN_USERNAME }}@${{ steps.get-vm-ip.outputs.vm_ip }}:~/nginx.conf

    - name: SSH into VM, move build files and config, and restart Nginx
      run: | 
        ssh -i ssh_key -o StrictHostKeyChecking=no ${{ secrets.ADMIN_USERNAME }}@${{ steps.get-vm-ip.outputs.vm_ip }} <<EOF
          sudo apt-get update
          sudo apt-get install nginx -y
          sudo systemctl start nginx
          sudo systemctl enable nginx
        
          sudo rm -rf /var/www/html
          sudo mkdir -p /var/www/html
          sudo mv /tmp/frontend/* /var/www/html/
        
          sudo chown -R www-data:www-data /var/www/html/

          sudo rm -rf /tmp/frontend/*
          sudo mv ~/nginx.conf /etc/nginx/sites-available/default
        
          sudo systemctl restart nginx 
        EOF

    - name: Remove SSH private key file
      run: rm ssh_key

    - name: Cloudflare - Update / Create DNS Entry (domain)
      uses: everpcpc/cloudflare-dns-action@v1
      with:
        type: "A"
        name: "${{ vars.DEPLOY_DOMAIN }}"
        content: "${{ steps.get-vm-ip.outputs.vm_ip }}"
        ttl: 1
        proxied: false
        token: ${{ secrets.CLOUDFLARE_API_KEY }}
        zone: ${{ secrets.CLOUDFLARE_ZONE }}
      
    - name: Cloudflare - Update / Create DNS Entry (www.domain)
      uses: everpcpc/cloudflare-dns-action@v1
      with:
        type: "A"
        name: "www.${{ vars.DEPLOY_DOMAIN }}"
        content: "${{ steps.get-vm-ip.outputs.vm_ip }}"
        ttl: 1
        proxied: false
        token: ${{ secrets.CLOUDFLARE_API_KEY }}
        zone: ${{ secrets.CLOUDFLARE_ZONE }}

